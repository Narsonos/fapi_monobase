name: ${APP_NAME}

services:
  app:
    image: ${IMAGE_BASE}-app:${GIT_COMMIT:-latest}
    build:
      context: ./services/api
      dockerfile: Dockerfile
      target: prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "-c", "import http.client; conn=http.client.HTTPConnection('localhost',8000); conn.request('GET','/api/health'); r=conn.getresponse(); exit(0) if r.status==200 else exit(1)"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      TZ: "Europe/Moscow"
      MODE: prod
      GIT_COMMIT: ${GIT_COMMIT}
    env_file:
      - .env
    networks:
      - project-network
    labels:
      loki.label.service_name: user_auth
      loki.label.service_type: api
      loki.label.env: prod


  celery_worker:
    image: ${IMAGE_BASE}-celery_worker:${GIT_COMMIT:-latest}
    build:
      context: ./services/api
      dockerfile: Dockerfile
      target: prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "app.infrastructure.dependencies:_celery", "status"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s
    environment:
      TZ: "Europe/Moscow"
      MODE: prod
      GIT_COMMIT: ${GIT_COMMIT}
      CELERY_WORKER_CONCURRENCY: 4
    env_file:
      - .env
    networks:
      - project-network
    command: celery -A app.infrastructure.dependencies:_celery worker --loglevel=info -P prefork -E
    labels:
      loki.label.service_name: user_auth
      loki.label.service_type: tasks
      loki.label.env: prod

  celery_beat:
    image: ${IMAGE_BASE}-celery_beat:${GIT_COMMIT:-latest}
    build:
      context: ./services/api
      dockerfile: Dockerfile
      target: prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "app.infrastructure.dependencies:_celery", "status"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s
    environment:
      TZ: "Europe/Moscow"
      MODE: prod
      GIT_COMMIT: ${GIT_COMMIT}
    env_file:
      - .env
    networks:
      - project-network
    command: celery -A app.infrastructure.dependencies:_celery beat --loglevel=info
    labels:
      loki.label.service_name: user_auth
      loki.label.service_type: tasks
      loki.label.env: prod

  nginx:
    image: nginx:1.27.0
    restart: unless-stopped
    ports:
      - "127.0.0.1:9092:80"
    depends_on:
      - app
    volumes:
      - ./services/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./services/nginx/upstream.conf:/etc/nginx/conf.d/upstream.conf:ro
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - project-network
    labels:
      loki.label.service_name: user_auth
      loki.label.service_type: nginx
      loki.label.env: prod

  db:
    image: mysql:8.0
    restart: unless-stopped
    command: --default-authentication-plugin=caching_sha2_password
    env_file: 
      - .env
    volumes:
      - db:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysql --user=$$MYSQL_USER --password=$$MYSQL_PASSWORD --execute='SELECT 1' $$MYSQL_DATABASE"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 30s
    networks:
      - project-network
    labels:
      loki.label.service_name: user_auth
      loki.label.service_type: db
      loki.label.env: prod

  redis:
    image: redis:latest
    restart: unless-stopped
    entrypoint: ["/bin/bash", "/usr/local/bin/redis-entrypoint.sh"]
    volumes:
      - redis:/data
      - ./services/redis/redis.conf:/usr/local/etc/redis/redis.conf.template:ro      
      - ./services/redis/redis-entrypoint.sh:/usr/local/bin/redis-entrypoint.sh:ro
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "redis-cli","-a", "$$REDIS_PASS","ping"]
      interval: 10s
      retries: 3
      timeout: 3s
    networks:
      - project-network
    labels:
      loki.label.service_name: user_auth
      loki.label.service_type: cache
      loki.label.env: prod

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    command:
      - '--path.rootfs=/' #just for example
      - '--web.listen-address=:9000'
      - '--collector.hwmon'
    volumes:
      - './:/host:ro,rslave'
    networks:
      - project-network
    restart: unless-stopped
    pid: host
    labels:
      loki.label.service_name: user_auth
      loki.label.service_type: node
      loki.label.env: prod

  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./services/promtail/config.yml:/etc/promtail/config.yml:ro
    command: 
      - '--config.file=/etc/promtail/config.yml'
    networks:
      - project-network
    labels:
      loki.label.service_name: user_auth
      loki.label.service_type: log_collector
      loki.label.env: prod


networks:
  project-network:
    name: ${APP_NAME}-net
    driver: bridge

volumes:
  db:
    name: ${APP_NAME}-db
  redis:
    name: ${APP_NAME}-redis
