name: CI/CD

on:
  workflow_dispatch:

env:
  SERVICE_NAME: userauth_service                      #basically, project name
  COMPOSE_APP_SERVICES: app,celery,celery-beat        #the names of the services that are to built in building stage
  COMPOSE_APP_SERVICE_NAME: app                       #the name ofo the app service in compose files
  PROD_COMPOSE_PATH: ./docker-compose.prod.yaml       #path to prod compose from project root
  TEST_COMPOSE_PATH: ./docker-compose.test.yaml       #path to test compose from project root
  DEV_COMPOSE_PATH: ./docker-compose.dev-local.yaml   #path to dev (build) compose from project root

  BAKED_MYSQL_PASSWORD: 123123123
  BAKED_MYSQL_USER: test

  PROD_SSH_DEPLOY_TARGET_PATH: /srv
  
  
jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo and setup Docker
        uses: actions/checkout@v4
        with: 
          sparse-checkout: |
            ${{ env.TEST_COMPOSE_PATH}}
            services
          #needs .env.test

      - name: Create a .env file. #Enter
        run: |
          cat <<EOF > .env.test
          #---------------Application envs are below-------------
          APP_NAME=${{ env.SERVICE_NAME }}
          DEFAULT_ADMIN_PASSWORD=${{ secrets.DEFAULT_ADMIN_PASSWORD}}
          SECRET=${{ secrets.SECRET }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          REFRESH_SECRET=${{ secrets.REFRESH_SECRET }}
          MYSQL_ROOT_PASSWORD=${{ env.BAKED_MYSQL_PASSWORD }}
          MYSQL_USER=${{ env.BAKED_MYSQL_USER }}
          MYSQL_PASSWORD=${{ env.BAKED_MYSQL_PASSWORD }}
          MYSQL_DATABASE=${{ env.BAKED_MYSQL_USER }}
          REDIS_PASS=${{ secrets.REDIS_PASS }}
          #-------------------------------------------------------
          EOF

      - name: Setup docker
        uses: docker/setup-docker-action@v4
          
      - name: Run test compose
        run: docker compose -f ./${{ env.TEST_COMPOSE_PATH}} up --build --abort-on-container-exit --exit-code-from ${{ env.COMPOSE_APP_SERVICE_NAME}}
  
  build:
    name: Build prod
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Clone repo
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ env.DEV_COMPOSE_PATH }}
            services/api
          #it also needs .env!

      - name: Set up Docker
        uses: docker/setup-docker-action@v4

      - name: Building and refreshing GHCR prod image
        env:
          IMAGE_BASE: ghcr.io/${{ github.repository_owner }}/${{ env.SERVICE_NAME }}
        run: |
          set -e
          echo "Building Docker image for ${{ env.SERVICE_NAME }} - [${{ env.COMPOSE_APP_SERVICES }}]"
          IFS=',' read -ra SERVICES <<< "${{ env.COMPOSE_APP_SERVICES }}"

          echo "üîê Logging in to GHCR..."
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin
      
          PUSH_TASKS=()
          for service in "${SERVICES[@]}"; do
            echo "üöÄ Building image for service: $service"
            docker compose -f "${{ env.DEV_COMPOSE_PATH }}"" build "$service"
            IMAGE_ID=$(docker compose -f "${{ env.DEV_COMPOSE_PATH }}" images -q "$service")
            if [ -z "$IMAGE_ID" ]; then
              echo "ERROR: Failed to get image ID!"
              exit 1
            fi

            SHA_TAG="${IMAGE_BASE}-${service}:${{ github.sha }}"
            LATEST_TAG="${IMAGE_BASE}-${service}:latest"

            echo "üè∑Ô∏è Tagging $IMAGE_ID as:"
            echo "   - $SHA_TAG"
            echo "   - $LATEST_TAG"
            docker tag "$IMAGE_ID" "$SHA_TAG"
            docker tag "$IMAGE_ID" "$LATEST_TAG"

            echo "‚úÖ Image for $service is ready to push."
            PUSH_TASKS+=("$service")
            echo
          done
          echo "üì§ Starting parallel pushes..."

          for service in "${PUSH_TASKS[@]}"; do
            (
              SHA_TAG="${IMAGE_BASE}-${service}:${{ github.sha }}"
              LATEST_TAG="${IMAGE_BASE}-${service}:latest"
              echo "‚û°Ô∏è Pushing $service ..."
              docker push "$SHA_TAG" >"push_${service}.log" 2>&1
              docker push "$LATEST_TAG" >>"push_${service}.log" 2>&1
              echo "‚úÖ $service pushed successfully!"
            ) &
          done
          EXIT_CODE=0
          for service in "${!PUSH_PIDS[@]}"; do
            wait ${PUSH_PIDS[$service]} || EXIT_CODE=1
            if [ $EXIT_CODE -ne 0 ]; then
              echo "‚ùå Push failed for service: $service. Logs:"
              cat "push_${service}.log"
            fi
          done

          if [ $EXIT_CODE -ne 0 ]; then
            echo "‚ö†Ô∏è Some pushes failed."
            exit 1
          fi

          echo "üéâ All images pushed successfully!"


  
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    env:
      SSH_DEPLOY_TARGET_PATH: /srv/${{github.repository.name}}
  
    steps:
      - uses: actions/checkout@v4
        with: 
          sparse-checkout: |
            ${{ env.PROD_COMPOSE_PATH }}
            services
            deploy_blue_green.py
            deploy_blue_green.conf.json

          #needs .env

      - name: Create a .env file. #Enter
        run: |
          cat <<EOF > .env
          #---------------Application envs are below-------------
          APP_NAME=${{ env.SERVICE_NAME }}
          DEFAULT_ADMIN_PASSWORD=${{ secrets.DEFAULT_ADMIN_PASSWORD}}
          SECRET=${{ secrets.SECRET }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          REFRESH_SECRET=${{ secrets.REFRESH_SECRET }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          REDIS_PASS=${{ secrets.REDIS_PASS }}
          #-------------------------------------------------------
          EOF


      - name: Copy project_files
        uses: appleboy/scp-action@v1
        with:
          host:     ${{ secrets.PROD_SSH_DEPLOY_HOST }}
          username: ${{ secrets.PROD_SSH_DEPLOY_USERNAME }}
          key: ${{ secrets.PROD_SSH_DEPLOY_KEY }}
          source: "../${{ github.repository.name }}"
          target: ${{ env.PROD_SSH_DEPLOY_TARGET_PATH }}
        
      
      - uses: docker/setup-docker-action@v4

      - name: Running blue-green deploy script...
        env:
          IMAGE_BASE: ghcr.io/${{ github.repository_owner }}/${{ env.SERVICE_NAME }}
        run: |
          python deploy_blue_green.py --project_name=${{ env.SERVICE_NAME }}